{
  "contract_name": "auctions-manager",
  "contract_version": "0.1.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "auction_code_id",
      "min_auction_amount"
    ],
    "properties": {
      "auction_code_id": {
        "type": "integer",
        "format": "uint64",
        "minimum": 0.0
      },
      "min_auction_amount": {
        "type": "array",
        "items": {
          "type": "array",
          "items": [
            {
              "type": "string"
            },
            {
              "$ref": "#/definitions/Uint128"
            }
          ],
          "maxItems": 2,
          "minItems": 2
        }
      }
    },
    "additionalProperties": false,
    "definitions": {
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "type": "string",
        "enum": [
          "approve_admin_change"
        ]
      },
      {
        "type": "object",
        "required": [
          "auction_funds"
        ],
        "properties": {
          "auction_funds": {
            "type": "object",
            "required": [
              "pair"
            ],
            "properties": {
              "pair": {
                "$ref": "#/definitions/Pair"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "withdraw_funds"
        ],
        "properties": {
          "withdraw_funds": {
            "type": "object",
            "required": [
              "pair"
            ],
            "properties": {
              "pair": {
                "$ref": "#/definitions/Pair"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "finish_auction"
        ],
        "properties": {
          "finish_auction": {
            "type": "object",
            "required": [
              "limit",
              "pair"
            ],
            "properties": {
              "limit": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "pair": {
                "$ref": "#/definitions/Pair"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "admin"
        ],
        "properties": {
          "admin": {
            "$ref": "#/definitions/AdminMsgs"
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "ActiveAuction": {
        "type": "object",
        "required": [
          "available_amount",
          "end_block",
          "end_price",
          "last_checked_block",
          "leftovers",
          "resolved_amount",
          "start_block",
          "start_price",
          "status",
          "total_amount"
        ],
        "properties": {
          "available_amount": {
            "description": "The available amount of pair.0",
            "allOf": [
              {
                "$ref": "#/definitions/Uint128"
              }
            ]
          },
          "end_block": {
            "description": "The auction ending block height",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "end_price": {
            "description": "The price on end_block",
            "allOf": [
              {
                "$ref": "#/definitions/Decimal"
              }
            ]
          },
          "last_checked_block": {
            "description": "The last checked block for chain halts",
            "allOf": [
              {
                "$ref": "#/definitions/BlockInfo"
              }
            ]
          },
          "leftovers": {
            "description": "leftover funds to add to the next auction",
            "type": "array",
            "items": {
              "$ref": "#/definitions/Uint128"
            },
            "maxItems": 2,
            "minItems": 2
          },
          "resolved_amount": {
            "description": "The received and resolved amount of pair.1",
            "allOf": [
              {
                "$ref": "#/definitions/Uint128"
              }
            ]
          },
          "start_block": {
            "description": "The auction starting block height",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "start_price": {
            "description": "The price on start_block",
            "allOf": [
              {
                "$ref": "#/definitions/Decimal"
              }
            ]
          },
          "status": {
            "description": "The auction status",
            "allOf": [
              {
                "$ref": "#/definitions/ActiveAuctionStatus"
              }
            ]
          },
          "total_amount": {
            "description": "The total funds of pair.0 that was sent to sell",
            "allOf": [
              {
                "$ref": "#/definitions/Uint128"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "ActiveAuctionStatus": {
        "oneOf": [
          {
            "description": "The auction started, and last resolved block height is (u64)",
            "type": "string",
            "enum": [
              "started"
            ]
          },
          {
            "description": "The auction is finished, if param is 0, we resolved everything, else it holds the last resovled height",
            "type": "string",
            "enum": [
              "finished"
            ]
          },
          {
            "description": "Handle closing auction, addr of the last funds provider we resolved and the total amounts of the pair we sent already (provider, total_amount_pair.0, total_amount_pair.1)",
            "type": "object",
            "required": [
              "close_auction"
            ],
            "properties": {
              "close_auction": {
                "type": "array",
                "items": [
                  {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/Addr"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  {
                    "$ref": "#/definitions/Uint128"
                  },
                  {
                    "$ref": "#/definitions/Uint128"
                  }
                ],
                "maxItems": 3,
                "minItems": 3
              }
            },
            "additionalProperties": false
          },
          {
            "description": "The auction is closed",
            "type": "string",
            "enum": [
              "auction_closed"
            ]
          }
        ]
      },
      "Addr": {
        "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
        "type": "string"
      },
      "AdminMsgs": {
        "oneOf": [
          {
            "type": "string",
            "enum": [
              "cancel_admin_change"
            ]
          },
          {
            "type": "object",
            "required": [
              "new_auction"
            ],
            "properties": {
              "new_auction": {
                "type": "object",
                "required": [
                  "msg"
                ],
                "properties": {
                  "min_amount": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/Uint128"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "msg": {
                    "$ref": "#/definitions/InstantiateMsg"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "open_auction"
            ],
            "properties": {
              "open_auction": {
                "type": "object",
                "required": [
                  "pair",
                  "params"
                ],
                "properties": {
                  "pair": {
                    "$ref": "#/definitions/Pair"
                  },
                  "params": {
                    "$ref": "#/definitions/NewAuctionParams"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "pause_auction"
            ],
            "properties": {
              "pause_auction": {
                "type": "object",
                "required": [
                  "pair"
                ],
                "properties": {
                  "pair": {
                    "$ref": "#/definitions/Pair"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "resume_auction"
            ],
            "properties": {
              "resume_auction": {
                "type": "object",
                "required": [
                  "pair"
                ],
                "properties": {
                  "pair": {
                    "$ref": "#/definitions/Pair"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "update_auction_id"
            ],
            "properties": {
              "update_auction_id": {
                "type": "object",
                "required": [
                  "code_id"
                ],
                "properties": {
                  "code_id": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "update_oracle"
            ],
            "properties": {
              "update_oracle": {
                "type": "object",
                "required": [
                  "oracle_addr"
                ],
                "properties": {
                  "oracle_addr": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "update_strategy"
            ],
            "properties": {
              "update_strategy": {
                "type": "object",
                "required": [
                  "pair",
                  "strategy"
                ],
                "properties": {
                  "pair": {
                    "$ref": "#/definitions/Pair"
                  },
                  "strategy": {
                    "$ref": "#/definitions/AuctionStrategy"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "update_chain_halt_config"
            ],
            "properties": {
              "update_chain_halt_config": {
                "type": "object",
                "required": [
                  "halt_config",
                  "pair"
                ],
                "properties": {
                  "halt_config": {
                    "$ref": "#/definitions/ChainHaltConfig"
                  },
                  "pair": {
                    "$ref": "#/definitions/Pair"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "update_price_freshness_strategy"
            ],
            "properties": {
              "update_price_freshness_strategy": {
                "type": "object",
                "required": [
                  "pair",
                  "strategy"
                ],
                "properties": {
                  "pair": {
                    "$ref": "#/definitions/Pair"
                  },
                  "strategy": {
                    "$ref": "#/definitions/PriceFreshnessStrategy"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "update_active_auction"
            ],
            "properties": {
              "update_active_auction": {
                "type": "object",
                "required": [
                  "pair",
                  "params"
                ],
                "properties": {
                  "pair": {
                    "$ref": "#/definitions/Pair"
                  },
                  "params": {
                    "$ref": "#/definitions/ActiveAuction"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "migrate_auction"
            ],
            "properties": {
              "migrate_auction": {
                "type": "object",
                "required": [
                  "code_id",
                  "msg",
                  "pair"
                ],
                "properties": {
                  "code_id": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  },
                  "msg": {
                    "$ref": "#/definitions/MigrateMsg"
                  },
                  "pair": {
                    "$ref": "#/definitions/Pair"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "start_admin_change"
            ],
            "properties": {
              "start_admin_change": {
                "type": "object",
                "required": [
                  "addr",
                  "expiration"
                ],
                "properties": {
                  "addr": {
                    "type": "string"
                  },
                  "expiration": {
                    "$ref": "#/definitions/Expiration"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "AuctionStrategy": {
        "type": "object",
        "required": [
          "end_price_perc",
          "start_price_perc"
        ],
        "properties": {
          "end_price_perc": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "start_price_perc": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        },
        "additionalProperties": false
      },
      "BlockInfo": {
        "type": "object",
        "required": [
          "chain_id",
          "height",
          "time"
        ],
        "properties": {
          "chain_id": {
            "type": "string"
          },
          "height": {
            "description": "The height of a block is the number of blocks preceding it in the blockchain.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "time": {
            "description": "Absolute time of the block creation in seconds since the UNIX epoch (00:00:00 on 1970-01-01 UTC).\n\nThe source of this is the [BFT Time in Tendermint](https://github.com/tendermint/tendermint/blob/58dc1726/spec/consensus/bft-time.md), which has the same nanosecond precision as the `Timestamp` type.\n\n# Examples\n\nUsing chrono:\n\n``` # use cosmwasm_std::{Addr, BlockInfo, ContractInfo, Env, MessageInfo, Timestamp, TransactionInfo}; # let env = Env { #     block: BlockInfo { #         height: 12_345, #         time: Timestamp::from_nanos(1_571_797_419_879_305_533), #         chain_id: \"cosmos-testnet-14002\".to_string(), #     }, #     transaction: Some(TransactionInfo { index: 3 }), #     contract: ContractInfo { #         address: Addr::unchecked(\"contract\"), #     }, # }; # extern crate chrono; use chrono::NaiveDateTime; let seconds = env.block.time.seconds(); let nsecs = env.block.time.subsec_nanos(); let dt = NaiveDateTime::from_timestamp(seconds as i64, nsecs as u32); ```\n\nCreating a simple millisecond-precision timestamp (as used in JavaScript):\n\n``` # use cosmwasm_std::{Addr, BlockInfo, ContractInfo, Env, MessageInfo, Timestamp, TransactionInfo}; # let env = Env { #     block: BlockInfo { #         height: 12_345, #         time: Timestamp::from_nanos(1_571_797_419_879_305_533), #         chain_id: \"cosmos-testnet-14002\".to_string(), #     }, #     transaction: Some(TransactionInfo { index: 3 }), #     contract: ContractInfo { #         address: Addr::unchecked(\"contract\"), #     }, # }; let millis = env.block.time.nanos() / 1_000_000; ```",
            "allOf": [
              {
                "$ref": "#/definitions/Timestamp"
              }
            ]
          }
        }
      },
      "ChainHaltConfig": {
        "type": "object",
        "required": [
          "block_avg",
          "cap"
        ],
        "properties": {
          "block_avg": {
            "description": "seconds each block is generated",
            "allOf": [
              {
                "$ref": "#/definitions/Decimal"
              }
            ]
          },
          "cap": {
            "description": "Time in seconds of how much of a halt we accept",
            "type": "integer",
            "format": "uint128",
            "minimum": 0.0
          }
        },
        "additionalProperties": false
      },
      "Decimal": {
        "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
        "type": "string"
      },
      "Expiration": {
        "description": "Expiration represents a point in time when some event happens. It can compare with a BlockInfo and will return is_expired() == true once the condition is hit (and for every block in the future)",
        "oneOf": [
          {
            "description": "AtHeight will expire when `env.block.height` >= height",
            "type": "object",
            "required": [
              "at_height"
            ],
            "properties": {
              "at_height": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          },
          {
            "description": "AtTime will expire when `env.block.time` >= time",
            "type": "object",
            "required": [
              "at_time"
            ],
            "properties": {
              "at_time": {
                "$ref": "#/definitions/Timestamp"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Never will never expire. Used to express the empty variant",
            "type": "object",
            "required": [
              "never"
            ],
            "properties": {
              "never": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "InstantiateMsg": {
        "type": "object",
        "required": [
          "auction_strategy",
          "chain_halt_config",
          "pair",
          "price_freshness_strategy"
        ],
        "properties": {
          "auction_strategy": {
            "$ref": "#/definitions/AuctionStrategy"
          },
          "chain_halt_config": {
            "$ref": "#/definitions/ChainHaltConfig"
          },
          "pair": {
            "$ref": "#/definitions/Pair"
          },
          "price_freshness_strategy": {
            "$ref": "#/definitions/PriceFreshnessStrategy"
          }
        },
        "additionalProperties": false
      },
      "MigrateMsg": {
        "type": "string",
        "enum": [
          "no_state_change"
        ]
      },
      "NewAuctionParams": {
        "type": "object",
        "required": [
          "end_block"
        ],
        "properties": {
          "end_block": {
            "description": "When auction should end",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "start_block": {
            "description": "Optional start block, if not provided, it will start from the current block",
            "type": [
              "integer",
              "null"
            ],
            "format": "uint64",
            "minimum": 0.0
          }
        },
        "additionalProperties": false
      },
      "Pair": {
        "type": "array",
        "items": [
          {
            "type": "string"
          },
          {
            "type": "string"
          }
        ],
        "maxItems": 2,
        "minItems": 2
      },
      "PriceFreshnessStrategy": {
        "description": "Gives us the strategy we should use for when the data is not fresh. \"multiplier\" list is sorted in descending order, so after we check the list, if the data is fresh, the multiplier is 1.\n\nEx: smallest day in the list is \"0.5\" (12 hours), so the multiplier will be 1 if the data is updated in the last 12 hours.",
        "type": "object",
        "required": [
          "limit",
          "multipliers"
        ],
        "properties": {
          "limit": {
            "description": "Amount of days price considered no longer fresh",
            "allOf": [
              {
                "$ref": "#/definitions/Decimal"
              }
            ]
          },
          "multipliers": {
            "description": "Multiplier per day of unfresh data (older than day, multipler) for when data is older than 2 days, we add: (\"2\", \"1.5\")",
            "type": "array",
            "items": {
              "type": "array",
              "items": [
                {
                  "$ref": "#/definitions/Decimal"
                },
                {
                  "$ref": "#/definitions/Decimal"
                }
              ],
              "maxItems": 2,
              "minItems": 2
            }
          }
        },
        "additionalProperties": false
      },
      "Timestamp": {
        "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
        "allOf": [
          {
            "$ref": "#/definitions/Uint64"
          }
        ]
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      },
      "Uint64": {
        "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
        "type": "string"
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "type": "string",
        "enum": [
          "get_admin"
        ]
      },
      {
        "description": "Get the price of a specific pair",
        "type": "object",
        "required": [
          "get_price"
        ],
        "properties": {
          "get_price": {
            "type": "object",
            "required": [
              "pair"
            ],
            "properties": {
              "pair": {
                "$ref": "#/definitions/Pair"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Get the config of a specific auction",
        "type": "object",
        "required": [
          "get_config"
        ],
        "properties": {
          "get_config": {
            "type": "object",
            "required": [
              "pair"
            ],
            "properties": {
              "pair": {
                "$ref": "#/definitions/Pair"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Get the pair address",
        "type": "object",
        "required": [
          "get_pair_addr"
        ],
        "properties": {
          "get_pair_addr": {
            "type": "object",
            "required": [
              "pair"
            ],
            "properties": {
              "pair": {
                "$ref": "#/definitions/Pair"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Get the oracle address",
        "type": "string",
        "enum": [
          "get_oracle_addr"
        ]
      },
      {
        "type": "object",
        "required": [
          "get_min_limit"
        ],
        "properties": {
          "get_min_limit": {
            "type": "object",
            "required": [
              "denom"
            ],
            "properties": {
              "denom": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Pair": {
        "type": "array",
        "items": [
          {
            "type": "string"
          },
          {
            "type": "string"
          }
        ],
        "maxItems": 2,
        "minItems": 2
      }
    }
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "get_admin": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Addr",
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "get_config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AuctionConfig",
      "type": "object",
      "required": [
        "chain_halt_config",
        "is_paused",
        "pair",
        "price_freshness_strategy"
      ],
      "properties": {
        "chain_halt_config": {
          "$ref": "#/definitions/ChainHaltConfig"
        },
        "is_paused": {
          "type": "boolean"
        },
        "pair": {
          "$ref": "#/definitions/Pair"
        },
        "price_freshness_strategy": {
          "$ref": "#/definitions/PriceFreshnessStrategy"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "ChainHaltConfig": {
          "type": "object",
          "required": [
            "block_avg",
            "cap"
          ],
          "properties": {
            "block_avg": {
              "description": "seconds each block is generated",
              "allOf": [
                {
                  "$ref": "#/definitions/Decimal"
                }
              ]
            },
            "cap": {
              "description": "Time in seconds of how much of a halt we accept",
              "type": "integer",
              "format": "uint128",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "Pair": {
          "type": "array",
          "items": [
            {
              "type": "string"
            },
            {
              "type": "string"
            }
          ],
          "maxItems": 2,
          "minItems": 2
        },
        "PriceFreshnessStrategy": {
          "description": "Gives us the strategy we should use for when the data is not fresh. \"multiplier\" list is sorted in descending order, so after we check the list, if the data is fresh, the multiplier is 1.\n\nEx: smallest day in the list is \"0.5\" (12 hours), so the multiplier will be 1 if the data is updated in the last 12 hours.",
          "type": "object",
          "required": [
            "limit",
            "multipliers"
          ],
          "properties": {
            "limit": {
              "description": "Amount of days price considered no longer fresh",
              "allOf": [
                {
                  "$ref": "#/definitions/Decimal"
                }
              ]
            },
            "multipliers": {
              "description": "Multiplier per day of unfresh data (older than day, multipler) for when data is older than 2 days, we add: (\"2\", \"1.5\")",
              "type": "array",
              "items": {
                "type": "array",
                "items": [
                  {
                    "$ref": "#/definitions/Decimal"
                  },
                  {
                    "$ref": "#/definitions/Decimal"
                  }
                ],
                "maxItems": 2,
                "minItems": 2
              }
            }
          },
          "additionalProperties": false
        }
      }
    },
    "get_min_limit": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Uint128",
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "get_oracle_addr": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Addr",
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "get_pair_addr": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Addr",
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "get_price": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "GetPriceResponse",
      "type": "object",
      "required": [
        "price",
        "time"
      ],
      "properties": {
        "price": {
          "$ref": "#/definitions/Decimal"
        },
        "time": {
          "$ref": "#/definitions/Timestamp"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    }
  }
}
